## 本章目标

口什么是 socket
口IPV4套接口地址结构
口网络字节序
口字节序转换函数
口地址转换函数
口套接字类型

口 socket可以看成是用户进程与内核网络协议栈的编程接口。
口 socket不仅可以用于本机的进程间通信，还可以用于网络上不同主机的进程间通信，也就是说可以把socket看成是进程间通信的一种手段。

```c
struct sockaddr_in {
	uint8_t sin_len;    //结构体的长度
	sa_family_t sin_family;   //地址家族,必须设为AF_INET
	in_port_t sin_port;       //端口号
	struct in_addr sin_addr;  //IPV4地址
	char sin_zero[8];         //暂不使用
};
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5c75ca7d-0f11-4154-bd0c-ab6c65223e85/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0cd0c489-6c86-4139-b784-0e30839215e2/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5710840b-93c7-418d-8abe-20034e52f40e/Untitled.png)

口字节序

大端字节序：

小端字节序：

x86平台一般为小端字节序

网络字节序规定为大端字节序

```c
#include <stdio.h>
#include <arpa/inet.h>

int main(void) {
	unsigned int x = 0x12345678;
	unsigned char *p = (unsigned char*)&x;
	printf("%0x %0x %0x %0x\n", p[0], p[1], p[2], p[3]);
	
	unsigned int y = htonl(x);
	p = (unsigned char*)&y;
	printf("%0x %0x %0x %0x\n", p[0], p[1], p[2], p[3]);
	return 0;
}
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b9bd9749-8189-4a43-a036-63872ab41d34/Untitled.png)

口流式套接字(SOCK_ STREAM)
提供面向连接的、可靠的数据传输服务，数据无差错，无重复的发送，且按发送顺序接收。
口数据报式套接字(SOCK_ DGRAM)
提供无连接服务。不提供无错保证，数据可能丢失或重复，并且接收顺序混乱
口原始套接字( SOCK_RAW)

可以跨越传输层，直接对IP层进行数据封装。通过原始套接字，我们可以将应用层的数据直接封装成IP层可以认识的协议格式
